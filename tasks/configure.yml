---
- name: Ensure efivars is mounted in chroot
  command: "chroot {{ _tgt_root }} mount -t efivarfs efivarfs /sys/firmware/efi/efivars"

- name: Set the hostname
  copy:
    dest: "{{ _tgt_root }}/etc/hostname"
    content: "{{ fqdn.split('.')[0] }}"
    mode: 0o644

- name: set root password
  command: >
      chroot {{ _tgt_root }} usermod -p '{{ root_password }}' root
  when: root_password is defined

- name: Configure additional hosts
  ansible.builtin.lineinfile:
    path: "{{ _tgt_root }}/etc/hosts"
    insertafter: '^127.0.0.1'
    line: "{{ item }}"
  loop: "{{ etchosts }}"

- name: Instantiate network templates to /etc
  template:
    src: "{{ item.src }}"
    dest: "{{ _tgt_root }}/etc/{{ item.dest | default(item.src) }}"
    owner: "{{ item.owner|default('root') }}"
    group: "{{ item.group|default('root') }}"
    mode: "{{ item.mode|default('0644') }}"
  with_items:
  - { src: 'resolv.conf', dest: 'resolv.conf' }
  - { src: 'interfaces', dest: 'network/interfaces' }
  when: not use_nmcli

- name: Configure NetworkManager to manage ethernet & wifi
  copy:
    content: |
      [keyfile]
      unmanaged-devices=*,except:type:wifi,except:type:gsm,except:type:cdma,except:type:ethernet
    dest: "{{ _tgt_root }}/etc/NetworkManager/conf.d/managed_devices.conf"
    owner: root
    group: root
    mode: 0o644

- name: Configure Wifi with Network-Manager
  community.general.nmcli:
    type: "{{ item.type }}"
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ssid: "{{ item.ssid }}"
    ip4: "{{ item.ip4 }}"
    autoconnect: "{{ item.autoconnect }}"
    state: present
  loop: "{{ network }}"
  when: use_nmcli

- name: Configure NFS
  mount:
    fstype: nfs
    opts: defaults
    path: "{{ nfs_mountroot }}/{{ item.1 }}"
    src: "{{ item.0.address }}/{{ item.1 }}"
    fstab: "{{ _tgt_root }}/etc/fstab"
    state: present
  loop: "{{ nfs_servers|subelements('mounts') }}"

- name: Ensure ZFS update rebuilds all initramfs
  copy:
    dest: "{{ _tgt_root }}/etc/dkms/zfs.conf"
    content: REMAKE_INITRD=yes
    mode: 0o644

- name: Set kexec to load
  replace:
    path: "{{ _tgt_root }}/etc/default/kexec"
    regexp: '^LOAD_KEXEC=false,'
    replace: 'LOAD_KEXEC=true,'

- name: Fix mounts in /etc/fstab
  replace:
    path: "{{ _tgt_root }}/etc/fstab"
    regexp: '/mnt/bootstrap/'
    replace: '/'

- name: Copy zfs passphrase to file
  copy:
    dest: "{{ _tgt_root }}/etc/zfs/{{ item.poolname }}.key"
    content: "{{ item.passphrase }}"
    mode: '600'
  loop: "{{ zfs_pool }}"
  no_log: true

- name: Change ZFS pool to look for key file
  command: >
    chroot {{ _tgt_root }} zfs change-key \
      -o keylocation=file:///etc/zfs/{{ item.poolname }}.key \
      -o keyformat=passphrase \
      {{ item.poolname }}
  loop: "{{ zfs_pool }}"
  no_log: true

- name: Set zfs commandline
  command: >
    chroot {{ _tgt_root }} \
      zfs set org.zfsbootmenu:commandline="spl_hostid=\{{ _hostid.stdout }} {{ item['zbm_cmdline']|join(' ') }}" {{ item.poolname }}/ROOT
  loop: "{{ zfs_pool }}"
#  no_log: true

- name: Ensure zfs-list.cache/{{ item.poolname }} exists
  file:
    path: "{{ _tgt_root }}/etc/zfs/{{ item.poolname }}.cache"
    state: touch
    owner: root
    group: root
    mode: '755'
  loop: "{{ zfs_pool }}"
  no_log: true

- name: Set zfs cachefile
  command: >
    chroot {{ _tgt_root }} zpool set cachefile=/etc/zfs/{{ item.poolname }}.cache {{ item.poolname }}
  loop: "{{ zfs_pool }}"
  no_log: true

- name: Get information about latest zfsbootmanager release
  uri:
    url: https://api.github.com/repos/zbm-dev/zfsbootmenu/releases/latest
    return_content: true
  register: _zbm_latest
  no_log: true

- name: Create directory for zfsbootmanager repo
  file:
    path: "{{ _tgt_root}}/root/zfsbootmenu"
    state: directory
    owner: root
    group: root
    mode: '755'

- name: Download and extract zfsbootmenu release
  unarchive:
    dest: "{{ _tgt_root}}/root/zfsbootmenu"
    owner: root
    group: root
    remote_src: yes
    src: "{{ _zbm_latest.json.tarball_url }}"
    validate_certs: no
    extra_opts: [--strip-components=1]

- name: Compile & install zfsbootmenu
  shell: "chroot {{ _tgt_root }} make -C /root/zfsbootmenu install"

- name: Configure dracut
  copy:
    content: |
      hostonly=" no "
      nofsck=" yes "
      add_dracutmodules+=" zfs "
      omit_dracutmodules+=" btrfs "
      install_items+=" {{ '/etc/zfs/' + item.poolname + '.key' }} "
    dest: "{{ _tgt_root }}/etc/dracut.conf.d/100-zol.conf"
    owner: root
    group: root
    mode: 0o644
  loop: "{{ zfs_pool }}"
  # no_log: true

- name: Configure zfsbootmenu
  copy:
    content: |
      Global:
        ManageImages: true
        BootMountPoint: /boot/efi
        DracutConfDir: /etc/zfsbootmenu/dracut.conf.d
      Components:
        ImageDir: /boot/efi/EFI/{{ release }}
        Versions: false
        Enabled: true
        syslinux:
          Config: /boot/syslinux/syslinux.cfg
          Enabled: false
      EFI:
        ImageDir: /boot/efi/EFI/{{ release }}
        Versions: false
        Enabled: false
      Kernel:
        CommandLine: ro quiet loglevel=0
    dest: "{{ _tgt_root }}/etc/zfsbootmenu/config.yaml"
    owner: root
    group: root
    mode: 0o644

- name: Omit systemd dracut modules to prevent ZBM boot breaking
  lineinfile:
    path: "{{ _tgt_root }}/etc/zfsbootmenu/dracut.conf.d/zfsbootmenu.conf"
    regexp: '^omit_dracutmodules+='
    line: 'omit_dracutmodules+=" btrfs resume systemd systemd-initrd dracut-systemd plymouth "'
    state: present

- name: Omit nouveau drives
  copy:
    content: |
      omit_drivers+=" nouveau "
    dest: "{{ _tgt_root }}/etc/zfsbootmenu/dracut.conf.d/disable_nouveau.conf"
    owner: root
    group: root
    mode: 0o644

- name: Create key to sign kernel modules
  command: |
    chroot {{ _tgt_root }} openssl \
      req \
      -nodes \
      -new -x509 -newkey rsa:2048 \
      -keyout /root/mok.priv \
      -outform DER -out /root/mok.der \
      -days 36500 \
      -subj "/CN={{ fqdn }} module signing key/"
  args:
    creates: /root/mok.priv

- name: Download & build Yaml PP Perl module
  command: "chroot {{ _tgt_root }} eatmydata cpan 'YAML::PP'"
  no_log: true

- name: Get kernel version installed on target
  command: "chroot {{ _tgt_root }} ls /lib/modules"
  register: _target_kernel

- name: Set target kernel version
  set_fact:
    target_kernel: "{{ _target_kernel.stdout }}"

- name: Update initrd & generate ZFSBootMenu
  command: "{{ item }}"
  loop:
    - "chroot {{ _tgt_root }} dracut -f --regenerate-all"
    - "chroot {{ _tgt_root }} generate-zbm"

- name: Create refind_linux.conf
  copy:
    content: |
      "Boot default"  "zfsbootmenu:POOL={{ item.poolname }} zbm.import_policy=hostid zbm.set_hostid zbm.timeout={{ item.zbm_timeout}} {{ item['zbm_cmdline']|join(' ') }}"
      "Boot to menu"  "zfsbootmenu:POOL={{ item.poolname }} zbm.import_policy=hostid zbm.set_hostid zbm.show ro quiet loglevel=0"
    dest: "{{ _tgt_root }}/boot/efi/EFI/{{ release }}/refind_linux.conf"
    owner: root
    group: root
    mode: 0o644
  loop: "{{ zfs_pool }}"
  no_log: true

- name: Install refind to /boot/efi
  command: "chroot {{ _tgt_root }} refind-install"

- name: Ensure EFI removable directory exists
  file:
    path: "{{ _tgt_root }}/boot/efi/EFI/Boot"
    state: directory
    owner: root
    group: root
    mode: '755'
  when: "efi_use_extra_removable|default(true)"

- name: Copy ZFSBootMenu to EFI removable directory
  copy:
    remote_src: true
    src: "{{ _tgt_root }}/boot/efi/EFI/refind/refind_x64.efi"
    dest: "{{ _tgt_root }}/boot/efi/EFI/Boot/bootx64.efi"
    mode: preserve
  when: "efi_use_extra_removable|default(true)"

- name: Ensure efivars is unmounted in chroot
  command: "chroot {{ _tgt_root }} umount efivarfs"

