---
# The reason to use tmpfs here is that dpkg is awful slow, especially when installing to
# slower devices (think thumb drive). It can be configured by the user, however.

- block:
  - name: create another tmpdir
    command: mktemp -d
    register: _mktemp

  - name: set target (tmpfs)
    set_fact:
      _bootstrap_target: "{{ _mktemp.stdout }}"
      _mktemp: None

  - name: mount tmpfs
    command: "mount -t tmpfs -o size=2G none {{ _bootstrap_target }} warn=no"

  when: use_tmpfs

- name: set target
  set_fact:
    _bootstrap_target: "{{ _tgt_root }}"
  when: not use_tmpfs

- block:
  - name: run bootstrap
    command: >
      eatmydata debootstrap {% if dbstrp_variant is defined %}--variant={{ dbstrp_variant }}{% endif %}
      {{ release }} {{ _bootstrap_target }} {{ use_mirror|default(mirrors[release]) }}

  - name: bind mount pseudo filesystems
    shell: "mkdir {{ _bootstrap_target }}/{{ item }}; mount --bind /{{ item }} {{ _bootstrap_target }}/{{ item }} warn=no"
    register: _pseudomount
    with_items: "{{ pseudo_fs }}"

  - name: Link mtab
    file:
      src: "/proc/mounts"
      dest: "{{ _bootstrap_target }}/etc/mtab"
      state: link

  - name: build list of packages to install
    set_fact:
      _install: "{{ install_packages.all + install_packages[release] }}"

  - name: Append WiFi Dependencies
    set_fact:
      _install: "{{ _install + install_packages.wifi }}"
    when: use_wifi

  - name: Filter packages to install with no_recommends
    set_fact:
      _install_no_recommends: "{{ _install | intersect(no_recommends) }}"

  - name: Filter packages to install normally
    set_fact:
      _install: "{{ _install | difference(_install_no_recommends) }}"

  rescue:
  - name: cleanup
    include_tasks: cleanup.yml

- block:
  # add more sources for apt
  - name: update sources.list
    template:
      src: "sources_ubuntu.list"
      dest: "{{ _bootstrap_target }}/etc/apt/sources.list"
      mode: "0644"
      owner: root
      group: root
    when: release in ["xenial", "artful", "bionic", "focal", "hirsuite"]

  - name: Update sources.list
    template:
      src: "sources_debian.list"
      dest: "{{ _bootstrap_target }}/etc/apt/sources.list"
      mode: "0644"
      owner: root
      group: root
    when: release in ["stretch", "buster", "sid", "bullseye"]

  - name: apt update & upgrade
    command: "{{ item }}"
    loop:
      - "chroot {{ _bootstrap_target }} apt update"
      - "chroot {{ _bootstrap_target }} apt full-upgrade -yq"

  # cut down on fsync
  - name: Install eatmydata & locales & console-setup
    command: "chroot {{ _bootstrap_target }} apt-get -yq install eatmydata locales console-setup"

  - name: Generate & configure locales
    command: "{{ item }}"
    loop:
      - "chroot {{ _bootstrap_target }} locale-gen {{ locale }}"
      - "chroot {{ _bootstrap_target }} echo 'LANG={{ locale }}' > /etc/default/locale"
      - "chroot {{ _bootstrap_target }} dpkg-reconfigure locales"
      - "chroot {{ _bootstrap_target }} update-locale {{ locale }}"

  - name: Link localtime to specified timezone
    file:
      path: "{{ _bootstrap_target }}/etc/localtime"
      src: "{{ _bootstrap_target }}/usr/share/zoneinfo/{{ timezone }}"

  - name: Run dpkg-reconfigure tzdata
    command: "chroot {{ _bootstrap_target }} dpkg-reconfigure tzdata"
  - name: Copy locale_prep script
    copy:
      content: |
        echo "America/New_York" > /etc/timezone && \
          dpkg-reconfigure -f noninteractive tzdata && \
          sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
          sed -i -e 's/# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/' /etc/locale.gen && \
          echo 'LANG="en_US.UTF-8"'>/etc/default/locale && \
          dpkg-reconfigure --frontend=noninteractive locales && \
          update-locale LANG=en_US.UTF-8
      dest: "{{ _bootstrap_target }}/root/locale_prep.sh"
      mode: "775"

  - name: Generate & configure locales
    command: "chroot {{ _bootstrap_target }} /root/locale_prep.sh"

  - name: Allow ppa use
    command: "chroot {{ _bootstrap_target }} eatmydata apt-get -yq install software-properties-common"
    when: >-
      install_ppa|default([])|length > 0 or
      (
        ansible_distribution == "Ubuntu"
        and ansible_distribution_release in ["bionic", "disco"]
        and zfs_pool is defined
      and dbstrp_zfs_backport|default(False))

  - name: Install ZFS ppa for 0.8
    command: >-
      chroot {{ _bootstrap_target }} eatmydata
      add-apt-repository -yu ppa:jonathonf/zfs
    when: >-
      ansible_distribution == "Ubuntu"
      and ansible_distribution_release in ["bionic", "disco"]
      and zfs_pool is defined
      and dbstrp_zfs_backport|default(False)

  # pool can't be imported when the hostid changes
  - name: copy hostid to chroot
    command: >-
      cp /etc/hostid {{ _bootstrap_target }}/etc/
    when: zfs_pool is defined

  - name: register hostid
    command: echo $(hostid)
    register: _hostid

  # A bit ineffective, since we'll be upgrading the cache every time.
  - name: Enable ppa
    shell: "chroot  {{ _bootstrap_target }} eatmydata add-apt-repository -yu {{ item }}"
    with_items: "{{ install_ppa|default([]) }}"
    when: install_ppa is defined and install_ppa|length > 0

  - name: install packages
    command: "{{ item }}"
    loop:
      - "chroot {{ _bootstrap_target }} eatmydata apt-get -yq install --no-install-recommends \
          {{ _install_no_recommends | join(' ') }}"
      - "chroot {{ _bootstrap_target }} eatmydata apt-get -yq  install {{ _install | join(' ') }}"
      - "chroot {{ _bootstrap_target }} eatmydata apt-get -q clean"

  environment: "{{ _apt_env }}"

- block:
  - name: umount pseudo filesystems
    command: umount {{ _bootstrap_target }}/{{ item }}
    with_items: "{{ pseudo_fs|reverse|list }}"

  - name: copy data from temp
    shell: cp -a {{ _bootstrap_target }}/* {{ _tgt_root }}/

  - name: bind mount pseudo filesystems
    shell: mkdir {{ _tgt_root }}/{{ item }}; mount --bind /{{ item }} {{ _tgt_root }}/{{ item }}
    register: _pseudomount
    with_items: "{{ pseudo_fs }}"

  - name: umount tmpfs
    command: "umount {{ _bootstrap_target }}"

  - name: remove tmpfs
    file:
      state: absent
      dest: "{{ _bootstrap_target }}"

  when: use_tmpfs

- name: Snapshot unconfigured filesystems
  zfs:
    name: "{{ zfs_root }}@bootstrap"
    state: present