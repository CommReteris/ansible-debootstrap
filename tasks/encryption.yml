---

- block:
  - name: install dependencies
    apt:
      name: "{{ item }}"
      state: latest
      update_cache: no # skip cache check since we already ran apt
    with_items:
    - "{{ dependencies.encryption }}"

  - name: add dependencies to install list
    set_fact:
      install_packages: "{{ install_packages + dependencies['encryption'] }}"

  - name: set encryption targets (partition)
    set_fact:
      _encrypt_targets: "{{ _encrypt_targets|default({})|combine({item.key: item.value}) }}"
    with_dict: "{{ _tgt_devices }}"
    when: item.value['encrypt']|default(False)

  - name: create encrypted devices
    shell: >
      echo '{{ item.value['passphrase'] }}' | cryptsetup -q --cipher {{ item.value['cipher']|default('aes-xts-plain64') }}
      --key-size {{ item.value['key-size']|default('256') }}  --hash {{ item.value['hash']|default('sha512') }}
      --iter-time {{ item.value['iter-time']|default('5000') }} luksFormat {{ item.key }}
    with_dict: "{{ _encrypt_targets|default({}) }}"

  - name: fetch luks UUID for device
    command: "cryptsetup luksUUID {{ item.key }}"
    register: _luksuuid
    with_dict: "{{ _encrypt_targets|default({}) }}"

  - name: store data for target devices
    set_fact:
      _tgt_devices: >
        {{ _tgt_devices|combine({'/dev/mapper/' +  item.item.value['target']:
        item.item.value|combine({'luksuuid': item.stdout, 'encrypt': None,
        'passphrase': None, 'target': None, 'use_dev': True})}) }}
    with_items: "{{ _luksuuid.results }}"

  - name: open luks Devices
    shell: >
      echo '{{ item.value['passphrase'] }}' |
      cryptsetup -q luksOpen {{ item.key }} {{ item.value['target'] }}
    with_dict: "{{ _encrypt_targets|default({}) }}"
    register: _luksopen

  rescue:
  - include_tasks: cleanup.yml
  - include_tasks: wipe.yml
  - fail:
      msg: "Setting up Encryption failed"
