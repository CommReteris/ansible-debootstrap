---

- name: Get live dist
  shell: echo $(uname -n)
  register: _live_dist

- name: Set live dist
  set_fact:
    live_dist: "{{ _live_dist.stdout }}"

# add more sources for apt
- name: Add pop-os repositories
  template:
    src: "{{ item }}"
    dest: "/etc/apt/sources.list.d/{{ item }}"
    mode: "0644"
    owner: root
    group: root
  loop:
    - "pop-os-apps.sources"
    - "pop-os-release.sources"
    - "system.sources"
  when: pop_os and live_dist != "pop-os"

- name: Add ubuntu repositories
  template:
    src: "sources_ubuntu.list"
    dest: "/etc/apt/sources.list"
    mode: "0644"
    owner: root
    group: root
  when: not pop_os and release in ["xenial", "artful", "bionic", "focal", "hirsute", "impish"]

- name: Add debian repositories
  template:
    src: "sources_debian.list"
    dest: "/etc/apt/sources.list"
    mode: "0644"
    owner: root
    group: root
  when: not pop_os and release in ["stretch", "buster", "sid", "bullseye", "bookworm"]

- name: Install add-apt-repository
  apt:
    name: software-properties-common
    state: latest
    update_cache: no
    install_recommends: no

- name: Add repository keys
  apt_key:
    id: "{{ item.key }}"
    keyserver: "{{ item.keyserver }}"
    state: present
    validate_certs: no
  loop: "{{ keys }}"
  when: keys is defined and keys|length > 0

- name: Add repositories
  apt_repository:
    filename: "{{ item.name }}"
    repo: "{{ item.deb }}"
    codename: "{{ item.release|default(release) }}"
    state: present
    validate_certs: no
    update_cache: no
  loop: "{{ repos }}"
  when: repos is defined and repos|length > 0

- name: Filter dependencies to install with no_recommends
  set_fact:
    _dependencies_no_recommends: "{{ dependencies | intersect(no_recommends) }}"

- name: Filter dependencies to install normally
  set_fact:
    _dependencies: "{{ dependencies | difference(_dependencies_no_recommends) }}"

- name: Install dependencies requiring no recommends
  apt:
    name: "{{ _dependencies_no_recommends }}"
    state: latest
    update_cache: yes
    install_recommends: no

# In some cases the old module is still loaded, this will unload and reload.
- block:
    - name: stop zed
      systemd:
        name: zfs-zed.service
        state: stopped

    - name: unload ZFS modules
      modprobe:
        name: "zfs"
        state: "absent"

    - name: load ZFS module
      modprobe:
        name: zfs
        state: present

  when: >-
    live_dist != "pop-os"
    and release in ["bionic", "disco", "hirsute", "impish"]
    and zfs_pool is defined

- name: Install dependencies
  apt:
    name: "{{ _dependencies }}"
    state: latest
    update_cache: no

# This may fail when buster-backports isn't enabled as repository, however
# this is preferable to debootstrap failing later. This works on the Hetzner
# rescue system which is a common use case for this author
- name: Install debootstrap from buster-backports when on buster and eoan
  apt:
    name: debootstrap
    state: latest
    default_release: buster-backports
    cache_valid_time: "{{ debian_cache_valid_time|default(7200) }}"
    update_cache: yes
  when: ansible_distribution_release == 'buster' and release == 'eoan'
