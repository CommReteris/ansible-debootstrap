---

- name: Import zpools from target devices
  command: >
    zpool import \
      -a -f -N -R {{ dbstrp_mountpoint }} \
      -d {{ item.0.disk.dev + ('p' if 'nvme' in item.0.disk.dev else '') + item.1.num|string}}
  when:
    - "item[1] is defined"
  loop: "{{ _target_device_info.results|subelements('partitions') }}"
  loop_control:
    label: "{{ item.0.disk.dev + ('p' if 'nvme' in item.0.disk.dev else '') + item.1.num|string}}"

- name: Create zfs filesystems
  command: >
    zfs create {% if 'options' in item %}-o {{ item['options']|default([])|join(' -o ') }}{% endif %}
    {{ item['path'] }}
  when:
    - "item.path not in {{ ansible_zfs_datasets }}"
  with_items: "{{ zfs_fs }}"

- name: Gather facts about ZFS filesystems
  community.general.zfs_facts:
    dataset: "{{ item.name }}"
    recurse: true
  loop: "{{ ansible_zfs_pools }}"
  loop_control:
    label: "{{ item.name }}"

- name: Unmount automounting zfs filesystems
  command: zfs umount -a

- name: Unmount noauto zfs filesystems
  command: zfs unmount {{ item.name }}
  when: "item.mounted == 'yes'"
  loop: "{{ ansible_zfs_datasets }}"
  loop_control:
    label: "{{ item.name }}"

- name: Export ZFS pools
  command: zpool export {{ item.name }}
  loop: '{{ ansible_zfs_pools }}'
  loop_control:
    label: "{{ item.name }}"

- name: Remove any residual directories in dbstrp_mountpoint
  file:
    path: "{{ dbstrp_mountpoint }}"
    state: absent
